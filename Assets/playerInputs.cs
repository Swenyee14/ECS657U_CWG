//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/playerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerInputs"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""d9f40e6d-3543-4d29-9bea-c85710226dbb"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""10686ee7-5376-4064-9e4c-2556a79be9c8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""a3b97ced-4133-431b-9b68-0e747b02e48d"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a622dc0b-2051-4b2c-a9d9-e8f29ddc443f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b44cdf6b-4ad0-4e4f-b13d-4fd493e2933e"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3a43ae43-295c-47d6-acec-59a419624b27"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1f6723b1-315b-485f-81d1-018fc59b0cc6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""9e13546c-63c2-4b41-840a-ef53f4a73487"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""b02350e6-795b-4408-bdbc-bdcde7570450"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""TowerPlacement"",
            ""id"": ""606c4484-b4e9-4b39-a952-7f7ddf438a71"",
            ""actions"": [
                {
                    ""name"": ""StartPlacement"",
                    ""type"": ""Button"",
                    ""id"": ""7df14286-1bf1-44d1-81d5-014db4331021"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelPlacement"",
                    ""type"": ""Button"",
                    ""id"": ""d8881e29-ac53-497b-9137-0cb6f2e95f62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceTower"",
                    ""type"": ""Button"",
                    ""id"": ""ee689fd0-080b-46cb-9266-2992ce1fb784"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9fb3f94e-b3f5-4d8b-90ca-ec006b49ad57"",
                    ""path"": ""<Keyboard>/#(1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartPlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b19cdc51-52b4-4012-9de1-b597b8515c08"",
                    ""path"": ""<Keyboard>/#(C)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelPlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d7f5dd3-960a-4d69-b9cf-857fc75f6b9b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceTower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_movement = m_PlayerMovement.FindAction("movement", throwIfNotFound: true);
        // TowerPlacement
        m_TowerPlacement = asset.FindActionMap("TowerPlacement", throwIfNotFound: true);
        m_TowerPlacement_StartPlacement = m_TowerPlacement.FindAction("StartPlacement", throwIfNotFound: true);
        m_TowerPlacement_CancelPlacement = m_TowerPlacement.FindAction("CancelPlacement", throwIfNotFound: true);
        m_TowerPlacement_PlaceTower = m_TowerPlacement.FindAction("PlaceTower", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_movement;
    public struct PlayerMovementActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerMovementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @movement => m_Wrapper.m_PlayerMovement_movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @movement.started += instance.OnMovement;
            @movement.performed += instance.OnMovement;
            @movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @movement.started -= instance.OnMovement;
            @movement.performed -= instance.OnMovement;
            @movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // TowerPlacement
    private readonly InputActionMap m_TowerPlacement;
    private List<ITowerPlacementActions> m_TowerPlacementActionsCallbackInterfaces = new List<ITowerPlacementActions>();
    private readonly InputAction m_TowerPlacement_StartPlacement;
    private readonly InputAction m_TowerPlacement_CancelPlacement;
    private readonly InputAction m_TowerPlacement_PlaceTower;
    public struct TowerPlacementActions
    {
        private @PlayerInputs m_Wrapper;
        public TowerPlacementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartPlacement => m_Wrapper.m_TowerPlacement_StartPlacement;
        public InputAction @CancelPlacement => m_Wrapper.m_TowerPlacement_CancelPlacement;
        public InputAction @PlaceTower => m_Wrapper.m_TowerPlacement_PlaceTower;
        public InputActionMap Get() { return m_Wrapper.m_TowerPlacement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TowerPlacementActions set) { return set.Get(); }
        public void AddCallbacks(ITowerPlacementActions instance)
        {
            if (instance == null || m_Wrapper.m_TowerPlacementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TowerPlacementActionsCallbackInterfaces.Add(instance);
            @StartPlacement.started += instance.OnStartPlacement;
            @StartPlacement.performed += instance.OnStartPlacement;
            @StartPlacement.canceled += instance.OnStartPlacement;
            @CancelPlacement.started += instance.OnCancelPlacement;
            @CancelPlacement.performed += instance.OnCancelPlacement;
            @CancelPlacement.canceled += instance.OnCancelPlacement;
            @PlaceTower.started += instance.OnPlaceTower;
            @PlaceTower.performed += instance.OnPlaceTower;
            @PlaceTower.canceled += instance.OnPlaceTower;
        }

        private void UnregisterCallbacks(ITowerPlacementActions instance)
        {
            @StartPlacement.started -= instance.OnStartPlacement;
            @StartPlacement.performed -= instance.OnStartPlacement;
            @StartPlacement.canceled -= instance.OnStartPlacement;
            @CancelPlacement.started -= instance.OnCancelPlacement;
            @CancelPlacement.performed -= instance.OnCancelPlacement;
            @CancelPlacement.canceled -= instance.OnCancelPlacement;
            @PlaceTower.started -= instance.OnPlaceTower;
            @PlaceTower.performed -= instance.OnPlaceTower;
            @PlaceTower.canceled -= instance.OnPlaceTower;
        }

        public void RemoveCallbacks(ITowerPlacementActions instance)
        {
            if (m_Wrapper.m_TowerPlacementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITowerPlacementActions instance)
        {
            foreach (var item in m_Wrapper.m_TowerPlacementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TowerPlacementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TowerPlacementActions @TowerPlacement => new TowerPlacementActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface ITowerPlacementActions
    {
        void OnStartPlacement(InputAction.CallbackContext context);
        void OnCancelPlacement(InputAction.CallbackContext context);
        void OnPlaceTower(InputAction.CallbackContext context);
    }
}
